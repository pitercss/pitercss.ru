!function(e,t){"function"==typeof define&&define.amd?define(function(){return e.Reveal=t(),e.Reveal}):"object"==typeof exports?module.exports=t():e.Reveal=t()}(this,function(){"use strict";function e(){Nt=/(iphone|ipod|ipad|android)/gi.test(Dt),Mt=/chrome/i.test(Dt)&&!/edge/i.test(Dt);var e=document.createElement("div");Ut.transforms3d="WebkitPerspective"in e.style||"MozPerspective"in e.style||"msPerspective"in e.style||"OPerspective"in e.style||"perspective"in e.style,Ut.transforms2d="WebkitTransform"in e.style||"MozTransform"in e.style||"msTransform"in e.style||"OTransform"in e.style||"transform"in e.style,Ut.requestAnimationFrameMethod=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,Ut.requestAnimationFrame="function"==typeof Ut.requestAnimationFrameMethod,Ut.canvas=!!document.createElement("canvas").getContext,Ut.overviewTransitions=!/Version\/[\d\.]+.*Safari/.test(Dt),Ut.zoom="zoom"in e.style&&!Nt&&(Mt||/Version\/[\d\.]+.*Safari/.test(Dt))}function t(){function e(){n.length&&head.js.apply(null,n),r()}for(var t=[],n=[],a=0,i=0,o=zt.dependencies.length;i<o;i++){var s=zt.dependencies[i];s.condition&&!s.condition()||(s.async?n.push(s.src):t.push(s.src),function(t){head.ready(t.src.match(/([\w\d_\-]*)\.?js$|[^\\\/]*$/i)[0],function(){"function"==typeof t.callback&&t.callback.apply(this),0==--a&&e()})}(s))}t.length?(a=t.length,head.js.apply(null,t)):e()}function r(){n(),u(),s(),ae(),p(),Ne(),he(!0),setTimeout(function(){Vt.slides.classList.remove("no-transition"),Wt=!0,Vt.wrapper.classList.add("ready"),M("ready",{indexh:Lt,indexv:Et,currentSlide:xt})},1),x()&&(h(),"complete"===document.readyState?o():window.addEventListener("load",o))}function n(){Vt.slides.classList.add("no-transition"),Vt.background=l(Vt.wrapper,"div","backgrounds",null),Vt.progress=l(Vt.wrapper,"div","progress","<span></span>"),Vt.progressbar=Vt.progress.querySelector("span"),l(Vt.wrapper,"aside","controls",'<button class="navigate-left" aria-label="previous slide"></button><button class="navigate-right" aria-label="next slide"></button><button class="navigate-up" aria-label="above slide"></button><button class="navigate-down" aria-label="below slide"></button>'),Vt.slideNumber=l(Vt.wrapper,"div","slide-number",""),Vt.speakerNotes=l(Vt.wrapper,"div","speaker-notes",null),Vt.speakerNotes.setAttribute("data-prevent-swipe",""),Vt.speakerNotes.setAttribute("tabindex","0"),l(Vt.wrapper,"div","pause-overlay",null),Vt.controls=document.querySelector(".reveal .controls"),Vt.wrapper.setAttribute("role","application"),Vt.controlsLeft=g(document.querySelectorAll(".navigate-left")),Vt.controlsRight=g(document.querySelectorAll(".navigate-right")),Vt.controlsUp=g(document.querySelectorAll(".navigate-up")),Vt.controlsDown=g(document.querySelectorAll(".navigate-down")),Vt.controlsPrev=g(document.querySelectorAll(".navigate-prev")),Vt.controlsNext=g(document.querySelectorAll(".navigate-next")),Vt.statusDiv=a()}function a(){var e=document.getElementById("aria-status-div");return e||((e=document.createElement("div")).style.position="absolute",e.style.height="1px",e.style.width="1px",e.style.overflow="hidden",e.style.clip="rect( 1px, 1px, 1px, 1px )",e.setAttribute("id","aria-status-div"),e.setAttribute("aria-live","polite"),e.setAttribute("aria-atomic","true"),Vt.wrapper.appendChild(e)),e}function i(e){var t="";if(3===e.nodeType)t+=e.textContent;else if(1===e.nodeType){var r=e.getAttribute("aria-hidden"),n="none"===window.getComputedStyle(e).display;"true"===r||n||g(e.childNodes).forEach(function(e){t+=i(e)})}return t}function o(){var e=O(window.innerWidth,window.innerHeight),t=Math.floor(e.width*(1+zt.margin)),r=Math.floor(e.height*(1+zt.margin)),n=e.width,a=e.height;k("@page{size:"+t+"px "+r+"px; margin: 0px;}"),k(".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: "+n+"px; max-height:"+a+"px}"),document.body.classList.add("print-pdf"),document.body.style.width=t+"px",document.body.style.height=r+"px",B(n,a),g(Vt.wrapper.querySelectorAll(Pt)).forEach(function(e,t){e.setAttribute("data-index-h",t),e.classList.contains("stack")&&g(e.querySelectorAll("section")).forEach(function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r)})}),g(Vt.wrapper.querySelectorAll(It)).forEach(function(e){if(!1===e.classList.contains("stack")){var i=(t-n)/2,o=(r-a)/2,s=e.scrollHeight,l=Math.max(Math.ceil(s/r),1);(1===(l=Math.min(l,zt.pdfMaxPagesPerSlide))&&zt.center||e.classList.contains("center"))&&(o=Math.max((r-s)/2,0));var c=document.createElement("div");if(c.className="pdf-page",c.style.height=(r+zt.pdfPageHeightOffset)*l+"px",e.parentNode.insertBefore(c,e),c.appendChild(e),e.style.left=i+"px",e.style.top=o+"px",e.style.width=n+"px",e.slideBackgroundElement&&c.insertBefore(e.slideBackgroundElement,e),zt.showNotes){var d=De(e);if(d){var u="string"==typeof zt.showNotes?zt.showNotes:"inline",p=document.createElement("div");p.classList.add("speaker-notes"),p.classList.add("speaker-notes-pdf"),p.setAttribute("data-layout",u),p.innerHTML=d,"separate-page"===u?c.parentNode.insertBefore(p,c.nextSibling):(p.style.left="8px",p.style.bottom="8px",p.style.width=t-16+"px",c.appendChild(p))}}if(zt.slideNumber&&/all|print/i.test(zt.showSlideNumber)){var f=parseInt(e.getAttribute("data-index-h"),10)+1,h=parseInt(e.getAttribute("data-index-v"),10)+1,v=document.createElement("div");v.classList.add("slide-number"),v.classList.add("slide-number-pdf"),v.innerHTML=pe(f,".",h),c.appendChild(v)}}}),g(Vt.wrapper.querySelectorAll(It+" .fragment")).forEach(function(e){e.classList.add("visible")}),M("pdf-ready")}function s(){setInterval(function(){0===Vt.wrapper.scrollTop&&0===Vt.wrapper.scrollLeft||(Vt.wrapper.scrollTop=0,Vt.wrapper.scrollLeft=0)},1e3)}function l(e,t,r,n){for(var a=e.querySelectorAll("."+r),i=0;i<a.length;i++){var o=a[i];if(o.parentNode===e)return o}var s=document.createElement(t);return s.classList.add(r),"string"==typeof n&&(s.innerHTML=n),e.appendChild(s),s}function c(){x();Vt.background.innerHTML="",Vt.background.classList.add("no-transition"),g(Vt.wrapper.querySelectorAll(Pt)).forEach(function(e){var t=d(e,Vt.background);g(e.querySelectorAll("section")).forEach(function(e){d(e,t),t.classList.add("stack")})}),zt.parallaxBackgroundImage?(Vt.background.style.backgroundImage='url("'+zt.parallaxBackgroundImage+'")',Vt.background.style.backgroundSize=zt.parallaxBackgroundSize,setTimeout(function(){Vt.wrapper.classList.add("has-parallax-background")},1)):(Vt.background.style.backgroundImage="",Vt.wrapper.classList.remove("has-parallax-background"))}function d(e,t){var r={background:e.getAttribute("data-background"),backgroundSize:e.getAttribute("data-background-size"),backgroundImage:e.getAttribute("data-background-image"),backgroundVideo:e.getAttribute("data-background-video"),backgroundIframe:e.getAttribute("data-background-iframe"),backgroundColor:e.getAttribute("data-background-color"),backgroundRepeat:e.getAttribute("data-background-repeat"),backgroundPosition:e.getAttribute("data-background-position"),backgroundTransition:e.getAttribute("data-background-transition")},n=document.createElement("div");n.className="slide-background "+e.className.replace(/present|past|future/,""),r.background&&(/^(http|file|\/\/)/gi.test(r.background)||/\.(svg|png|jpg|jpeg|gif|bmp)([?#]|$)/gi.test(r.background)?e.setAttribute("data-background-image",r.background):n.style.background=r.background),(r.background||r.backgroundColor||r.backgroundImage||r.backgroundVideo||r.backgroundIframe)&&n.setAttribute("data-background-hash",r.background+r.backgroundSize+r.backgroundImage+r.backgroundVideo+r.backgroundIframe+r.backgroundColor+r.backgroundRepeat+r.backgroundPosition+r.backgroundTransition),r.backgroundSize&&(n.style.backgroundSize=r.backgroundSize),r.backgroundSize&&n.setAttribute("data-background-size",r.backgroundSize),r.backgroundColor&&(n.style.backgroundColor=r.backgroundColor),r.backgroundRepeat&&(n.style.backgroundRepeat=r.backgroundRepeat),r.backgroundPosition&&(n.style.backgroundPosition=r.backgroundPosition),r.backgroundTransition&&n.setAttribute("data-background-transition",r.backgroundTransition),t.appendChild(n),e.classList.remove("has-dark-background"),e.classList.remove("has-light-background"),e.slideBackgroundElement=n;var a=window.getComputedStyle(n);if(a&&a.backgroundColor){var i=L(a.backgroundColor);i&&0!==i.a&&(E(a.backgroundColor)<128?e.classList.add("has-dark-background"):e.classList.add("has-light-background"))}return n}function u(){zt.postMessage&&window.addEventListener("message",function(e){var t=e.data;"string"==typeof t&&"{"===t.charAt(0)&&"}"===t.charAt(t.length-1)&&(t=JSON.parse(t)).method&&"function"==typeof At[t.method]&&At[t.method].apply(At,t.args)},!1)}function p(e){var t=Vt.wrapper.querySelectorAll(It).length;Vt.wrapper.classList.remove(zt.transition),"object"==typeof e&&v(zt,e),!1===Ut.transforms3d&&(zt.transition="linear"),Vt.wrapper.classList.add(zt.transition),Vt.wrapper.setAttribute("data-transition-speed",zt.transitionSpeed),Vt.wrapper.setAttribute("data-background-transition",zt.backgroundTransition),Vt.controls.style.display=zt.controls?"block":"none",Vt.progress.style.display=zt.progress?"block":"none",zt.shuffle&&oe(),zt.rtl?Vt.wrapper.classList.add("rtl"):Vt.wrapper.classList.remove("rtl"),zt.center?Vt.wrapper.classList.add("center"):Vt.wrapper.classList.remove("center"),!1===zt.pause&&Q(),zt.showNotes?(Vt.speakerNotes.classList.add("visible"),Vt.speakerNotes.setAttribute("data-layout","string"==typeof zt.showNotes?zt.showNotes:"inline")):Vt.speakerNotes.classList.remove("visible"),zt.mouseWheel?(document.addEventListener("DOMMouseScroll",st,!1),document.addEventListener("mousewheel",st,!1)):(document.removeEventListener("DOMMouseScroll",st,!1),document.removeEventListener("mousewheel",st,!1)),zt.rollingLinks?T():I(),zt.previewLinks?(P(),C("[data-preview-link=false]")):(C(),P("[data-preview-link]:not([data-preview-link=false])")),Tt&&(Tt.destroy(),Tt=null),t>1&&zt.autoSlide&&zt.autoSlideStoppable&&Ut.canvas&&Ut.requestAnimationFrame&&((Tt=new kt(Vt.wrapper,function(){return Math.min(Math.max((Date.now()-Qt)/Jt,0),1)})).on("click",wt),Gt=!1),!1===zt.fragments&&g(Vt.slides.querySelectorAll(".fragment")).forEach(function(e){e.classList.add("visible"),e.classList.remove("current-fragment")});var r="none";zt.slideNumber&&!x()&&("all"===zt.showSlideNumber?r="block":"speaker"===zt.showSlideNumber&&qe()&&(r="block")),Vt.slideNumber.style.display=r,ne()}function f(){if(Kt=!0,window.addEventListener("hashchange",vt,!1),window.addEventListener("resize",gt,!1),zt.touch&&(Vt.wrapper.addEventListener("touchstart",tt,!1),Vt.wrapper.addEventListener("touchmove",rt,!1),Vt.wrapper.addEventListener("touchend",nt,!1),window.navigator.pointerEnabled?(Vt.wrapper.addEventListener("pointerdown",at,!1),Vt.wrapper.addEventListener("pointermove",it,!1),Vt.wrapper.addEventListener("pointerup",ot,!1)):window.navigator.msPointerEnabled&&(Vt.wrapper.addEventListener("MSPointerDown",at,!1),Vt.wrapper.addEventListener("MSPointerMove",it,!1),Vt.wrapper.addEventListener("MSPointerUp",ot,!1))),zt.keyboard&&(document.addEventListener("keydown",et,!1),document.addEventListener("keypress",Ge,!1)),zt.progress&&Vt.progress&&Vt.progress.addEventListener("click",lt,!1),zt.focusBodyOnPageVisibilityChange){var e;"hidden"in document?e="visibilitychange":"msHidden"in document?e="msvisibilitychange":"webkitHidden"in document&&(e="webkitvisibilitychange"),e&&document.addEventListener(e,mt,!1)}var t=["touchstart","click"];Dt.match(/android/gi)&&(t=["touchstart"]),t.forEach(function(e){Vt.controlsLeft.forEach(function(t){t.addEventListener(e,ct,!1)}),Vt.controlsRight.forEach(function(t){t.addEventListener(e,dt,!1)}),Vt.controlsUp.forEach(function(t){t.addEventListener(e,ut,!1)}),Vt.controlsDown.forEach(function(t){t.addEventListener(e,pt,!1)}),Vt.controlsPrev.forEach(function(t){t.addEventListener(e,ft,!1)}),Vt.controlsNext.forEach(function(t){t.addEventListener(e,ht,!1)})})}function h(){Kt=!1,document.removeEventListener("keydown",et,!1),document.removeEventListener("keypress",Ge,!1),window.removeEventListener("hashchange",vt,!1),window.removeEventListener("resize",gt,!1),Vt.wrapper.removeEventListener("touchstart",tt,!1),Vt.wrapper.removeEventListener("touchmove",rt,!1),Vt.wrapper.removeEventListener("touchend",nt,!1),window.navigator.pointerEnabled?(Vt.wrapper.removeEventListener("pointerdown",at,!1),Vt.wrapper.removeEventListener("pointermove",it,!1),Vt.wrapper.removeEventListener("pointerup",ot,!1)):window.navigator.msPointerEnabled&&(Vt.wrapper.removeEventListener("MSPointerDown",at,!1),Vt.wrapper.removeEventListener("MSPointerMove",it,!1),Vt.wrapper.removeEventListener("MSPointerUp",ot,!1)),zt.progress&&Vt.progress&&Vt.progress.removeEventListener("click",lt,!1),["touchstart","click"].forEach(function(e){Vt.controlsLeft.forEach(function(t){t.removeEventListener(e,ct,!1)}),Vt.controlsRight.forEach(function(t){t.removeEventListener(e,dt,!1)}),Vt.controlsUp.forEach(function(t){t.removeEventListener(e,ut,!1)}),Vt.controlsDown.forEach(function(t){t.removeEventListener(e,pt,!1)}),Vt.controlsPrev.forEach(function(t){t.removeEventListener(e,ft,!1)}),Vt.controlsNext.forEach(function(t){t.removeEventListener(e,ht,!1)})})}function v(e,t){for(var r in t)e[r]=t[r]}function g(e){return Array.prototype.slice.call(e)}function m(e){if("string"==typeof e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;if(e.match(/^[\d\.]+$/))return parseFloat(e)}return e}function b(e,t){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(r*r+n*n)}function y(e,t){e.style.WebkitTransform=t,e.style.MozTransform=t,e.style.msTransform=t,e.style.transform=t}function w(e){"string"==typeof e.layout&&(jt.layout=e.layout),"string"==typeof e.overview&&(jt.overview=e.overview),jt.layout?y(Vt.slides,jt.layout+" "+jt.overview):y(Vt.slides,jt.overview)}function k(e){var t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText=e:t.appendChild(document.createTextNode(e)),document.getElementsByTagName("head")[0].appendChild(t)}function A(e,t){for(var r=e.parentNode;r;){var n=r.matches||r.matchesSelector||r.msMatchesSelector;if(n&&n.call(r,t))return r;r=r.parentNode}return null}function L(e){var t=e.match(/^#([0-9a-f]{3})$/i);if(t&&t[1])return t=t[1],{r:17*parseInt(t.charAt(0),16),g:17*parseInt(t.charAt(1),16),b:17*parseInt(t.charAt(2),16)};var r=e.match(/^#([0-9a-f]{6})$/i);if(r&&r[1])return r=r[1],{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16)};var n=e.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);if(n)return{r:parseInt(n[1],10),g:parseInt(n[2],10),b:parseInt(n[3],10)};var a=e.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*([\d]+|[\d]*.[\d]+)\s*\)$/i);return a?{r:parseInt(a[1],10),g:parseInt(a[2],10),b:parseInt(a[3],10),a:parseFloat(a[4])}:null}function E(e){return"string"==typeof e&&(e=L(e)),e?(299*e.r+587*e.g+114*e.b)/1e3:null}function S(e,t){if(t=t||0,e){var r,n=e.style.height;return e.style.height="0px",r=t-e.parentNode.offsetHeight,e.style.height=n+"px",r}return t}function x(){return/print-pdf/gi.test(window.location.search)}function q(){zt.hideAddressBar&&Nt&&(window.addEventListener("load",N,!1),window.addEventListener("orientationchange",N,!1))}function N(){setTimeout(function(){window.scrollTo(0,1)},10)}function M(e,t){var r=document.createEvent("HTMLEvents",1,2);r.initEvent(e,!0,!0),v(r,t),Vt.wrapper.dispatchEvent(r),zt.postMessageEvents&&window.parent!==window.self&&window.parent.postMessage(JSON.stringify({namespace:"reveal",eventName:e,state:ze()}),"*")}function T(){if(Ut.transforms3d&&!("msPerspective"in document.body.style))for(var e=Vt.wrapper.querySelectorAll(It+" a"),t=0,r=e.length;t<r;t++){var n=e[t];if(n.textContent&&!n.querySelector("*")&&(!n.className||!n.classList.contains(n,"roll"))){var a=document.createElement("span");a.setAttribute("data-title",n.text),a.innerHTML=n.innerHTML,n.classList.add("roll"),n.innerHTML="",n.appendChild(a)}}}function I(){for(var e=Vt.wrapper.querySelectorAll(It+" a.roll"),t=0,r=e.length;t<r;t++){var n=e[t],a=n.querySelector("span");a&&(n.classList.remove("roll"),n.innerHTML=a.innerHTML)}}function P(e){g(document.querySelectorAll(e||"a")).forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.addEventListener("click",yt,!1)})}function C(e){g(document.querySelectorAll(e||"a")).forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.removeEventListener("click",yt,!1)})}function H(e){R(),Vt.overlay=document.createElement("div"),Vt.overlay.classList.add("overlay"),Vt.overlay.classList.add("overlay-preview"),Vt.wrapper.appendChild(Vt.overlay),Vt.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>','<a class="external" href="'+e+'" target="_blank"><span class="icon"></span></a>',"</header>",'<div class="spinner"></div>','<div class="viewport">','<iframe src="'+e+'"></iframe>','<small class="viewport-inner">','<span class="x-frame-error">Unable to load iframe. This is likely due to the site\'s policy (x-frame-options).</span>',"</small>","</div>"].join(""),Vt.overlay.querySelector("iframe").addEventListener("load",function(e){Vt.overlay.classList.add("loaded")},!1),Vt.overlay.querySelector(".close").addEventListener("click",function(e){R(),e.preventDefault()},!1),Vt.overlay.querySelector(".external").addEventListener("click",function(e){R()},!1),setTimeout(function(){Vt.overlay.classList.add("visible")},1)}function D(e){"boolean"==typeof e?e?z():R():Vt.overlay?R():z()}function z(){if(zt.help){R(),Vt.overlay=document.createElement("div"),Vt.overlay.classList.add("overlay"),Vt.overlay.classList.add("overlay-help"),Vt.wrapper.appendChild(Vt.overlay);var e='<p class="title">Keyboard Shortcuts</p><br/>';e+="<table><th>KEY</th><th>ACTION</th>";for(var t in tr)e+="<tr><td>"+t+"</td><td>"+tr[t]+"</td></tr>";e+="</table>",Vt.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>',"</header>",'<div class="viewport">','<div class="viewport-inner">'+e+"</div>","</div>"].join(""),Vt.overlay.querySelector(".close").addEventListener("click",function(e){R(),e.preventDefault()},!1),setTimeout(function(){Vt.overlay.classList.add("visible")},1)}}function R(){Vt.overlay&&(Vt.overlay.parentNode.removeChild(Vt.overlay),Vt.overlay=null)}function W(){if(Vt.wrapper&&!x()){var e=O();B(zt.width,zt.height),Vt.slides.style.width=e.width+"px",Vt.slides.style.height=e.height+"px",Xt=Math.min(e.presentationWidth/e.width,e.presentationHeight/e.height),Xt=Math.max(Xt,zt.minScale),1===(Xt=Math.min(Xt,zt.maxScale))?(Vt.slides.style.zoom="",Vt.slides.style.left="",Vt.slides.style.top="",Vt.slides.style.bottom="",Vt.slides.style.right="",w({layout:""})):Xt>1&&Ut.zoom?(Vt.slides.style.zoom=Xt,Vt.slides.style.left="",Vt.slides.style.top="",Vt.slides.style.bottom="",Vt.slides.style.right="",w({layout:""})):(Vt.slides.style.zoom="",Vt.slides.style.left="50%",Vt.slides.style.top="50%",Vt.slides.style.bottom="auto",Vt.slides.style.right="auto",w({layout:"translate(-50%, -50%) scale("+Xt+")"}));for(var t=g(Vt.wrapper.querySelectorAll(It)),r=0,n=t.length;r<n;r++){var a=t[r];"none"!==a.style.display&&(zt.center||a.classList.contains("center")?a.classList.contains("stack")?a.style.top=0:a.style.top=Math.max((e.height-a.scrollHeight)/2,0)+"px":a.style.top="")}de(),ve(),_()&&V()}}function B(e,t){g(Vt.slides.querySelectorAll("section > .stretch")).forEach(function(r){var n=S(r,t);if(/(img|video)/gi.test(r.nodeName)){var a=r.naturalWidth||r.videoWidth,i=r.naturalHeight||r.videoHeight,o=Math.min(e/a,n/i);r.style.width=a*o+"px",r.style.height=i*o+"px"}else r.style.width=e+"px",r.style.height=n+"px"})}function O(e,t){var r={width:zt.width,height:zt.height,presentationWidth:e||Vt.wrapper.offsetWidth,presentationHeight:t||Vt.wrapper.offsetHeight};return r.presentationWidth-=r.presentationWidth*zt.margin,r.presentationHeight-=r.presentationHeight*zt.margin,"string"==typeof r.width&&/%$/.test(r.width)&&(r.width=parseInt(r.width,10)/100*r.presentationWidth),"string"==typeof r.height&&/%$/.test(r.height)&&(r.height=parseInt(r.height,10)/100*r.presentationHeight),r}function F(e,t){"object"==typeof e&&"function"==typeof e.setAttribute&&e.setAttribute("data-previous-indexv",t||0)}function Y(e){if("object"==typeof e&&"function"==typeof e.setAttribute&&e.classList.contains("stack")){var t=e.hasAttribute("data-start-indexv")?"data-start-indexv":"data-previous-indexv";return parseInt(e.getAttribute(t)||0,10)}return 0}function X(){if(zt.overview&&!_()){Bt=!0,Vt.wrapper.classList.add("overview"),Vt.wrapper.classList.remove("overview-deactivating"),Ut.overviewTransitions&&setTimeout(function(){Vt.wrapper.classList.add("overview-animated")},1),Ye(),Vt.slides.appendChild(Vt.background),g(Vt.wrapper.querySelectorAll(It)).forEach(function(e){e.classList.contains("stack")||e.addEventListener("click",bt,!0)});var e=O();Ot=e.width+70,Ft=e.height+70,zt.rtl&&(Ot=-Ot),le(),j(),V(),W(),M("overviewshown",{indexh:Lt,indexv:Et,currentSlide:xt})}}function j(){g(Vt.wrapper.querySelectorAll(Pt)).forEach(function(e,t){e.setAttribute("data-index-h",t),y(e,"translate3d("+t*Ot+"px, 0, 0)"),e.classList.contains("stack")&&g(e.querySelectorAll("section")).forEach(function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r),y(e,"translate3d(0, "+r*Ft+"px, 0)")})}),g(Vt.background.childNodes).forEach(function(e,t){y(e,"translate3d("+t*Ot+"px, 0, 0)"),g(e.querySelectorAll(".slide-background")).forEach(function(e,t){y(e,"translate3d(0, "+t*Ft+"px, 0)")})})}function V(){var e=Math.min(window.innerWidth,window.innerHeight);w({overview:["scale("+Math.max(e/5,150)/e+")","translateX("+-Lt*Ot+"px)","translateY("+-Et*Ft+"px)"].join(" ")})}function U(){zt.overview&&(Bt=!1,Vt.wrapper.classList.remove("overview"),Vt.wrapper.classList.remove("overview-animated"),Vt.wrapper.classList.add("overview-deactivating"),setTimeout(function(){Vt.wrapper.classList.remove("overview-deactivating")},1),Vt.wrapper.appendChild(Vt.background),g(Vt.wrapper.querySelectorAll(It)).forEach(function(e){y(e,""),e.removeEventListener("click",bt,!0)}),g(Vt.background.querySelectorAll(".slide-background")).forEach(function(e){y(e,"")}),w({overview:""}),re(Lt,Et),W(),Fe(),M("overviewhidden",{indexh:Lt,indexv:Et,currentSlide:xt}))}function $(e){"boolean"==typeof e?e?X():U():_()?U():X()}function _(){return Bt}function K(e){return(e=e||xt)&&e.parentNode&&!!e.parentNode.nodeName.match(/section/i)}function J(){var e=document.documentElement,t=e.requestFullscreen||e.webkitRequestFullscreen||e.webkitRequestFullScreen||e.mozRequestFullScreen||e.msRequestFullscreen;t&&t.apply(e)}function Z(){if(zt.pause){var e=Vt.wrapper.classList.contains("paused");Ye(),Vt.wrapper.classList.add("paused"),!1===e&&M("paused")}}function Q(){var e=Vt.wrapper.classList.contains("paused");Vt.wrapper.classList.remove("paused"),Fe(),e&&M("resumed")}function G(e){"boolean"==typeof e?e?Z():Q():ee()?Q():Z()}function ee(){return Vt.wrapper.classList.contains("paused")}function te(e){"boolean"==typeof e?e?je():Xe():Gt?je():Xe()}function re(e,t,r,n){St=xt;var a=Vt.wrapper.querySelectorAll(Pt);if(0!==a.length){void 0!==t||_()||(t=Y(a[e])),St&&St.parentNode&&St.parentNode.classList.contains("stack")&&F(St.parentNode,Et);var o=Yt.concat();Yt.length=0;var s=Lt||0,l=Et||0;Lt=se(Pt,void 0===e?Lt:e),Et=se(Ct,void 0===t?Et:t),le(),W();e:for(var c=0,d=Yt.length;c<d;c++){for(var u=0;u<o.length;u++)if(o[u]===Yt[c]){o.splice(u,1);continue e}document.documentElement.classList.add(Yt[c]),M(Yt[c])}for(;o.length;)document.documentElement.classList.remove(o.pop());_()&&V();var p=a[Lt],f=p.querySelectorAll("section");xt=f[Et]||p,void 0!==r&&We(r);var h=Lt!==s||Et!==l;h?M("slidechanged",{indexh:Lt,indexv:Et,previousSlide:St,currentSlide:xt,origin:n}):St=null,St&&(St.classList.remove("present"),St.setAttribute("aria-hidden","true"),Vt.wrapper.querySelector(Ht).classList.contains("present")&&setTimeout(function(){var e,t=g(Vt.wrapper.querySelectorAll(Pt+".stack"));for(e in t)t[e]&&F(t[e],0)},0)),!h&&St||(Ee(St),ke(xt)),Vt.statusDiv.textContent=i(xt),fe(),de(),he(),ve(),ue(),ce(),Me(),Fe()}}function ne(){h(),f(),W(),Jt=zt.autoSlide,Fe(),c(),Me(),ie(),fe(),de(),ue(),le(),he(!0),ce(),we(),!1===zt.autoPlayMedia?Ee(xt):ke(xt),_()&&j()}function ae(){g(Vt.wrapper.querySelectorAll(Pt)).forEach(function(e){g(e.querySelectorAll("section")).forEach(function(e,t){t>0&&(e.classList.remove("present"),e.classList.remove("past"),e.classList.add("future"),e.setAttribute("aria-hidden","true"))})})}function ie(){g(Vt.wrapper.querySelectorAll(Pt)).forEach(function(e){var t=g(e.querySelectorAll("section"));t.forEach(function(e,t){Re(e.querySelectorAll(".fragment"))}),0===t.length&&Re(e.querySelectorAll(".fragment"))})}function oe(){var e=g(Vt.wrapper.querySelectorAll(Pt));e.forEach(function(t){Vt.slides.insertBefore(t,e[Math.floor(Math.random()*e.length)])})}function se(e,t){var r=g(Vt.wrapper.querySelectorAll(e)),n=r.length,a=x();if(n){zt.loop&&(t%=n)<0&&(t=n+t),t=Math.max(Math.min(t,n-1),0);for(var i=0;i<n;i++){var o=r[i],s=zt.rtl&&!K(o);if(o.classList.remove("past"),o.classList.remove("present"),o.classList.remove("future"),o.setAttribute("hidden",""),o.setAttribute("aria-hidden","true"),o.querySelector("section")&&o.classList.add("stack"),a)o.classList.add("present");else if(i<t){if(o.classList.add(s?"future":"past"),zt.fragments)for(var l=g(o.querySelectorAll(".fragment"));l.length;){var c=l.pop();c.classList.add("visible"),c.classList.remove("current-fragment")}}else if(i>t&&(o.classList.add(s?"past":"future"),zt.fragments))for(var d=g(o.querySelectorAll(".fragment.visible"));d.length;){var u=d.pop();u.classList.remove("visible"),u.classList.remove("current-fragment")}}r[t].classList.add("present"),r[t].removeAttribute("hidden"),r[t].removeAttribute("aria-hidden");var p=r[t].getAttribute("data-state");p&&(Yt=Yt.concat(p.split(" ")))}else t=0;return t}function le(){var e,t=g(Vt.wrapper.querySelectorAll(Pt)),r=t.length;if(r&&void 0!==Lt){var n=_()?10:zt.viewDistance;Nt&&(n=_()?6:2),x()&&(n=Number.MAX_VALUE);for(var a=0;a<r;a++){var i=t[a],o=g(i.querySelectorAll("section")),s=o.length;if(e=Math.abs((Lt||0)-a)||0,zt.loop&&(e=Math.abs(((Lt||0)-a)%(r-n))||0),e<n?ge(i):me(i),s)for(var l=Y(i),c=0;c<s;c++){var d=o[c];e+(a===(Lt||0)?Math.abs((Et||0)-c):Math.abs(c-l))<n?ge(d):me(d)}}}}function ce(){zt.showNotes&&Vt.speakerNotes&&xt&&!x()&&(Vt.speakerNotes.innerHTML=De()||"")}function de(){zt.progress&&Vt.progressbar&&(Vt.progressbar.style.width=xe()*Vt.wrapper.offsetWidth+"px")}function ue(){if(zt.slideNumber&&Vt.slideNumber){var e=[],t="h.v";switch("string"==typeof zt.slideNumber&&(t=zt.slideNumber),t){case"c":e.push(Se()+1);break;case"c/t":e.push(Se()+1,"/",Pe());break;case"h/v":e.push(Lt+1),K()&&e.push("/",Et+1);break;default:e.push(Lt+1),K()&&e.push(".",Et+1)}Vt.slideNumber.innerHTML=pe(e[0],e[1],e[2])}}function pe(e,t,r){return"number"!=typeof r||isNaN(r)?'<span class="slide-number-a">'+e+"</span>":'<span class="slide-number-a">'+e+'</span><span class="slide-number-delimiter">'+t+'</span><span class="slide-number-b">'+r+"</span>"}function fe(){var e=be(),t=ye();Vt.controlsLeft.concat(Vt.controlsRight).concat(Vt.controlsUp).concat(Vt.controlsDown).concat(Vt.controlsPrev).concat(Vt.controlsNext).forEach(function(e){e.classList.remove("enabled"),e.classList.remove("fragmented"),e.setAttribute("disabled","disabled")}),e.left&&Vt.controlsLeft.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.right&&Vt.controlsRight.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.up&&Vt.controlsUp.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.down&&Vt.controlsDown.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),(e.left||e.up)&&Vt.controlsPrev.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),(e.right||e.down)&&Vt.controlsNext.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),xt&&(t.prev&&Vt.controlsPrev.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&Vt.controlsNext.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),K(xt)?(t.prev&&Vt.controlsUp.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&Vt.controlsDown.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})):(t.prev&&Vt.controlsLeft.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&Vt.controlsRight.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})))}function he(e){var t=null,r=zt.rtl?"future":"past",n=zt.rtl?"past":"future";if(g(Vt.background.childNodes).forEach(function(a,i){a.classList.remove("past"),a.classList.remove("present"),a.classList.remove("future"),i<Lt?a.classList.add(r):i>Lt?a.classList.add(n):(a.classList.add("present"),t=a),(e||i===Lt)&&g(a.querySelectorAll(".slide-background")).forEach(function(e,r){e.classList.remove("past"),e.classList.remove("present"),e.classList.remove("future"),r<Et?e.classList.add("past"):r>Et?e.classList.add("future"):(e.classList.add("present"),i===Lt&&(t=e))})}),qt&&Ee(qt),t){ke(t);var a=t.style.backgroundImage||"";/\.gif/i.test(a)&&(t.style.backgroundImage="",window.getComputedStyle(t).opacity,t.style.backgroundImage=a);var i=qt?qt.getAttribute("data-background-hash"):null,o=t.getAttribute("data-background-hash");o&&o===i&&t!==qt&&Vt.background.classList.add("no-transition"),qt=t}xt&&["has-light-background","has-dark-background"].forEach(function(e){xt.classList.contains(e)?Vt.wrapper.classList.add(e):Vt.wrapper.classList.remove(e)}),setTimeout(function(){Vt.background.classList.remove("no-transition")},1)}function ve(){if(zt.parallaxBackgroundImage){var e,t,r=Vt.wrapper.querySelectorAll(Pt),n=Vt.wrapper.querySelectorAll(Ct),a=Vt.background.style.backgroundSize.split(" ");1===a.length?e=t=parseInt(a[0],10):(e=parseInt(a[0],10),t=parseInt(a[1],10));var i,o=Vt.background.offsetWidth,s=r.length;i=("number"==typeof zt.parallaxBackgroundHorizontal?zt.parallaxBackgroundHorizontal:s>1?(e-o)/(s-1):0)*Lt*-1;var l,c,d=Vt.background.offsetHeight,u=n.length;l="number"==typeof zt.parallaxBackgroundVertical?zt.parallaxBackgroundVertical:(t-d)/(u-1),c=u>0?l*Et:0,Vt.background.style.backgroundPosition=i+"px "+-c+"px"}}function ge(e){e.style.display=zt.display,g(e.querySelectorAll("img[data-src], video[data-src], audio[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src")}),g(e.querySelectorAll("video, audio")).forEach(function(e){var t=0;g(e.querySelectorAll("source[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src"),t+=1}),t>0&&e.load()});var t=Te(e),r=He(t.h,t.v);if(r&&(r.style.display="block",!1===r.hasAttribute("data-loaded"))){r.setAttribute("data-loaded","true");var n=e.getAttribute("data-background-image"),a=e.getAttribute("data-background-video"),i=e.hasAttribute("data-background-video-loop"),o=e.hasAttribute("data-background-video-muted"),s=e.getAttribute("data-background-iframe");if(n)r.style.backgroundImage="url("+n+")";else if(a&&!qe()){var l=document.createElement("video");i&&l.setAttribute("loop",""),o&&(l.muted=!0),Nt&&(l.muted=!0,l.autoplay=!0,l.setAttribute("playsinline","")),a.split(",").forEach(function(e){l.innerHTML+='<source src="'+e+'">'}),r.appendChild(l)}else if(s){var c=document.createElement("iframe");c.setAttribute("allowfullscreen",""),c.setAttribute("mozallowfullscreen",""),c.setAttribute("webkitallowfullscreen",""),/autoplay=(1|true|yes)/gi.test(s)?c.setAttribute("data-src",s):c.setAttribute("src",s),c.style.width="100%",c.style.height="100%",c.style.maxHeight="100%",c.style.maxWidth="100%",r.appendChild(c)}}}function me(e){e.style.display="none";var t=Te(e),r=He(t.h,t.v);r&&(r.style.display="none")}function be(){var e=Vt.wrapper.querySelectorAll(Pt),t=Vt.wrapper.querySelectorAll(Ct),r={left:Lt>0||zt.loop,right:Lt<e.length-1||zt.loop,up:Et>0,down:Et<t.length-1};if(zt.rtl){var n=r.left;r.left=r.right,r.right=n}return r}function ye(){if(xt&&zt.fragments){var e=xt.querySelectorAll(".fragment"),t=xt.querySelectorAll(".fragment:not(.visible)");return{prev:e.length-t.length>0,next:!!t.length}}return{prev:!1,next:!1}}function we(){var e=function(e,t,r){g(Vt.slides.querySelectorAll("iframe["+e+'*="'+t+'"]')).forEach(function(t){var n=t.getAttribute(e);n&&-1===n.indexOf(r)&&t.setAttribute(e,n+(/\?/.test(n)?"&":"?")+r)})};e("src","youtube.com/embed/","enablejsapi=1"),e("data-src","youtube.com/embed/","enablejsapi=1"),e("src","player.vimeo.com/","api=1"),e("data-src","player.vimeo.com/","api=1")}function ke(e){e&&!qe()&&(g(e.querySelectorAll('img[src$=".gif"]')).forEach(function(e){e.setAttribute("src",e.getAttribute("src"))}),g(e.querySelectorAll("video, audio")).forEach(function(e){if(!A(e,".fragment")||A(e,".fragment.visible")){var t=zt.autoPlayMedia;"boolean"!=typeof t&&(t=e.hasAttribute("data-autoplay")||!!A(e,".slide-background")),t&&"function"==typeof e.play&&(e.readyState>1?Ae({target:e}):(e.removeEventListener("loadeddata",Ae),e.addEventListener("loadeddata",Ae)))}}),g(e.querySelectorAll("iframe[src]")).forEach(function(e){A(e,".fragment")&&!A(e,".fragment.visible")||Le({target:e})}),g(e.querySelectorAll("iframe[data-src]")).forEach(function(e){A(e,".fragment")&&!A(e,".fragment.visible")||e.getAttribute("src")!==e.getAttribute("data-src")&&(e.removeEventListener("load",Le),e.addEventListener("load",Le),e.setAttribute("src",e.getAttribute("data-src")))}))}function Ae(e){var t=!!A(e.target,"html"),r=!!A(e.target,".present");t&&r&&(e.target.currentTime=0,e.target.play()),e.target.removeEventListener("loadeddata",Ae)}function Le(e){var t=e.target;if(t&&t.contentWindow){var r=!!A(e.target,"html"),n=!!A(e.target,".present");if(r&&n){var a=zt.autoPlayMedia;"boolean"!=typeof a&&(a=t.hasAttribute("data-autoplay")||!!A(t,".slide-background")),/youtube\.com\/embed\//.test(t.getAttribute("src"))&&a?t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*"):/player\.vimeo\.com\//.test(t.getAttribute("src"))&&a?t.contentWindow.postMessage('{"method":"play"}',"*"):t.contentWindow.postMessage("slide:start","*")}}}function Ee(e){e&&e.parentNode&&(g(e.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.pause||(e.setAttribute("data-paused-by-reveal",""),e.pause())}),g(e.querySelectorAll("iframe")).forEach(function(e){e.contentWindow&&e.contentWindow.postMessage("slide:stop","*"),e.removeEventListener("load",Le)}),g(e.querySelectorAll('iframe[src*="youtube.com/embed/"]')).forEach(function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}),g(e.querySelectorAll('iframe[src*="player.vimeo.com/"]')).forEach(function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"method":"pause"}',"*")}),g(e.querySelectorAll("iframe[data-src]")).forEach(function(e){e.setAttribute("src","about:blank"),e.removeAttribute("src")}))}function Se(){var e=g(Vt.wrapper.querySelectorAll(Pt)),t=0;e:for(var r=0;r<e.length;r++){for(var n=e[r],a=g(n.querySelectorAll("section")),i=0;i<a.length;i++){if(a[i].classList.contains("present"))break e;t++}if(n.classList.contains("present"))break;!1===n.classList.contains("stack")&&t++}return t}function xe(){var e=Pe(),t=Se();if(xt){var r=xt.querySelectorAll(".fragment");if(r.length>0){t+=xt.querySelectorAll(".fragment.visible").length/r.length*.9}}return t/(e-1)}function qe(){return!!window.location.search.match(/receiver/gi)}function Ne(){var e=window.location.hash,t=e.slice(2).split("/"),r=e.replace(/#|\//gi,"");if(isNaN(parseInt(t[0],10))&&r.length){var n;if(/^[a-zA-Z][\w:.-]*$/.test(r)&&(n=document.getElementById(r)),n){var a=At.getIndices(n);re(a.h,a.v)}else re(Lt||0,Et||0)}else{var i=parseInt(t[0],10)||0,o=parseInt(t[1],10)||0;i===Lt&&o===Et||re(i,o)}}function Me(e){if(zt.history)if(clearTimeout(_t),"number"==typeof e)_t=setTimeout(Me,e);else if(xt){var t="/",r=xt.getAttribute("id");r&&(r=r.replace(/[^a-zA-Z0-9\-\_\:\.]/g,"")),"string"==typeof r&&r.length?t="/"+r:((Lt>0||Et>0)&&(t+=Lt),Et>0&&(t+="/"+Et)),window.location.hash=t}}function Te(e){var t,r=Lt,n=Et;if(e){var a=K(e),i=a?e.parentNode:e,o=g(Vt.wrapper.querySelectorAll(Pt));r=Math.max(o.indexOf(i),0),n=void 0,a&&(n=Math.max(g(e.parentNode.querySelectorAll("section")).indexOf(e),0))}if(!e&&xt&&xt.querySelectorAll(".fragment").length>0){var s=xt.querySelector(".current-fragment");t=s&&s.hasAttribute("data-fragment-index")?parseInt(s.getAttribute("data-fragment-index"),10):xt.querySelectorAll(".fragment.visible").length-1}return{h:r,v:n,f:t}}function Ie(){return g(Vt.wrapper.querySelectorAll(It+":not(.stack)"))}function Pe(){return Ie().length}function Ce(e,t){var r=Vt.wrapper.querySelectorAll(Pt)[e],n=r&&r.querySelectorAll("section");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}function He(e,t){if(!x()){var r=Vt.wrapper.querySelectorAll(".backgrounds>.slide-background")[e],n=r&&r.querySelectorAll(".slide-background");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}var a=Ce(e,t);if(a)return a.slideBackgroundElement}function De(e){if((e=e||xt).hasAttribute("data-notes"))return e.getAttribute("data-notes");var t=e.querySelector("aside.notes");return t?t.innerHTML:null}function ze(){var e=Te();return{indexh:e.h,indexv:e.v,indexf:e.f,paused:ee(),overview:_()}}function Re(e){var t=[],r=[],n=[];(e=g(e)).forEach(function(e,n){if(e.hasAttribute("data-fragment-index")){var a=parseInt(e.getAttribute("data-fragment-index"),10);t[a]||(t[a]=[]),t[a].push(e)}else r.push([e])});var a=0;return(t=t.concat(r)).forEach(function(e){e.forEach(function(e){n.push(e),e.setAttribute("data-fragment-index",a)}),a++}),n}function We(e,t){if(xt&&zt.fragments){var r=Re(xt.querySelectorAll(".fragment"));if(r.length){if("number"!=typeof e){var n=Re(xt.querySelectorAll(".fragment.visible")).pop();e=n?parseInt(n.getAttribute("data-fragment-index")||0,10):-1}"number"==typeof t&&(e+=t);var a=[],o=[];return g(r).forEach(function(t,r){t.hasAttribute("data-fragment-index")&&(r=parseInt(t.getAttribute("data-fragment-index"),10)),r<=e?(t.classList.contains("visible")||a.push(t),t.classList.add("visible"),t.classList.remove("current-fragment"),Vt.statusDiv.textContent=i(t),r===e&&(t.classList.add("current-fragment"),ke(t))):(t.classList.contains("visible")&&o.push(t),t.classList.remove("visible"),t.classList.remove("current-fragment"))}),o.length&&M("fragmenthidden",{fragment:o[0],fragments:o}),a.length&&M("fragmentshown",{fragment:a[0],fragments:a}),fe(),de(),!(!a.length&&!o.length)}}return!1}function Be(){return We(null,1)}function Oe(){return We(null,-1)}function Fe(){if(Ye(),xt){var e=xt.querySelector(".current-fragment");e||(e=xt.querySelector(".fragment"));var t=e?e.getAttribute("data-autoslide"):null,r=xt.parentNode?xt.parentNode.getAttribute("data-autoslide"):null,n=xt.getAttribute("data-autoslide");Jt=t?parseInt(t,10):n?parseInt(n,10):r?parseInt(r,10):zt.autoSlide,0===xt.querySelectorAll(".fragment").length&&g(xt.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-autoplay")&&Jt&&1e3*e.duration/e.playbackRate>Jt&&(Jt=1e3*e.duration/e.playbackRate+1e3)}),!Jt||Gt||ee()||_()||At.isLastSlide()&&!ye().next&&!0!==zt.loop||(Zt=setTimeout(function(){"function"==typeof zt.autoSlideMethod?zt.autoSlideMethod():Je(),Fe()},Jt),Qt=Date.now()),Tt&&Tt.setPlaying(-1!==Zt)}}function Ye(){clearTimeout(Zt),Zt=-1}function Xe(){Jt&&!Gt&&(Gt=!0,M("autoslidepaused"),clearTimeout(Zt),Tt&&Tt.setPlaying(!1))}function je(){Jt&&Gt&&(Gt=!1,M("autoslideresumed"),Fe())}function Ve(){zt.rtl?(_()||!1===Be())&&be().left&&re(Lt+1):(_()||!1===Oe())&&be().left&&re(Lt-1)}function Ue(){zt.rtl?(_()||!1===Oe())&&be().right&&re(Lt-1):(_()||!1===Be())&&be().right&&re(Lt+1)}function $e(){(_()||!1===Oe())&&be().up&&re(Lt,Et-1)}function _e(){(_()||!1===Be())&&be().down&&re(Lt,Et+1)}function Ke(){if(!1===Oe())if(be().up)$e();else{var e;if(e=zt.rtl?g(Vt.wrapper.querySelectorAll(Pt+".future")).pop():g(Vt.wrapper.querySelectorAll(Pt+".past")).pop()){var t=e.querySelectorAll("section").length-1||void 0;re(Lt-1,t)}}}function Je(){!1===Be()&&(be().down?_e():zt.rtl?Ve():Ue())}function Ze(e){for(;e&&"function"==typeof e.hasAttribute;){if(e.hasAttribute("data-prevent-swipe"))return!0;e=e.parentNode}return!1}function Qe(e){zt.autoSlideStoppable&&Xe()}function Ge(e){e.shiftKey&&63===e.charCode&&D()}function et(e){if("function"==typeof zt.keyboardCondition&&!1===zt.keyboardCondition())return!0;var t=Gt;Qe(e);var r=document.activeElement&&"inherit"!==document.activeElement.contentEditable,n=document.activeElement&&document.activeElement.tagName&&/input|textarea/i.test(document.activeElement.tagName),a=document.activeElement&&document.activeElement.className&&/speaker-notes/i.test(document.activeElement.className);if(!(r||n||a||e.shiftKey&&32!==e.keyCode||e.altKey||e.ctrlKey||e.metaKey)){var i,o=[66,86,190,191];if("object"==typeof zt.keyboard)for(i in zt.keyboard)"togglePause"===zt.keyboard[i]&&o.push(parseInt(i,10));if(ee()&&-1===o.indexOf(e.keyCode))return!1;var s=!1;if("object"==typeof zt.keyboard)for(i in zt.keyboard)if(parseInt(i,10)===e.keyCode){var l=zt.keyboard[i];"function"==typeof l?l.apply(null,[e]):"string"==typeof l&&"function"==typeof At[l]&&At[l].call(),s=!0}if(!1===s)switch(s=!0,e.keyCode){case 80:case 33:Ke();break;case 78:case 34:Je();break;case 72:case 37:Ve();break;case 76:case 39:Ue();break;case 75:case 38:$e();break;case 74:case 40:_e();break;case 36:re(0);break;case 35:re(Number.MAX_VALUE);break;case 32:_()?U():e.shiftKey?Ke():Je();break;case 13:_()?U():s=!1;break;case 58:case 59:case 66:case 86:case 190:case 191:G();break;case 70:J();break;case 65:zt.autoSlideStoppable&&te(t);break;default:s=!1}s?e.preventDefault&&e.preventDefault():27!==e.keyCode&&79!==e.keyCode||!Ut.transforms3d||(Vt.overlay?R():$(),e.preventDefault&&e.preventDefault()),Fe()}}function tt(e){if(Ze(e.target))return!0;er.startX=e.touches[0].clientX,er.startY=e.touches[0].clientY,er.startCount=e.touches.length,2===e.touches.length&&zt.overview&&(er.startSpan=b({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:er.startX,y:er.startY}))}function rt(e){if(Ze(e.target))return!0;if(er.captured)Dt.match(/android/gi)&&e.preventDefault();else{Qe(e);var t=e.touches[0].clientX,r=e.touches[0].clientY;if(2===e.touches.length&&2===er.startCount&&zt.overview){var n=b({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:er.startX,y:er.startY});Math.abs(er.startSpan-n)>er.threshold&&(er.captured=!0,n<er.startSpan?X():U()),e.preventDefault()}else if(1===e.touches.length&&2!==er.startCount){var a=t-er.startX,i=r-er.startY;a>er.threshold&&Math.abs(a)>Math.abs(i)?(er.captured=!0,Ve()):a<-er.threshold&&Math.abs(a)>Math.abs(i)?(er.captured=!0,Ue()):i>er.threshold?(er.captured=!0,$e()):i<-er.threshold&&(er.captured=!0,_e()),zt.embedded?(er.captured||K(xt))&&e.preventDefault():e.preventDefault()}}}function nt(e){er.captured=!1}function at(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],tt(e))}function it(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],rt(e))}function ot(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],nt(e))}function st(e){if(Date.now()-$t>600){$t=Date.now();var t=e.detail||-e.wheelDelta;t>0?Je():t<0&&Ke()}}function lt(e){Qe(e),e.preventDefault();var t=g(Vt.wrapper.querySelectorAll(Pt)).length,r=Math.floor(e.clientX/Vt.wrapper.offsetWidth*t);zt.rtl&&(r=t-r),re(r)}function ct(e){e.preventDefault(),Qe(),Ve()}function dt(e){e.preventDefault(),Qe(),Ue()}function ut(e){e.preventDefault(),Qe(),$e()}function pt(e){e.preventDefault(),Qe(),_e()}function ft(e){e.preventDefault(),Qe(),Ke()}function ht(e){e.preventDefault(),Qe(),Je()}function vt(e){Ne()}function gt(e){W()}function mt(e){!1===(document.webkitHidden||document.msHidden||document.hidden)&&document.activeElement!==document.body&&("function"==typeof document.activeElement.blur&&document.activeElement.blur(),document.body.focus())}function bt(e){if(Kt&&_()){e.preventDefault();for(var t=e.target;t&&!t.nodeName.match(/section/gi);)t=t.parentNode;t&&!t.classList.contains("disabled")&&(U(),t.nodeName.match(/section/gi)&&re(parseInt(t.getAttribute("data-index-h"),10),parseInt(t.getAttribute("data-index-v"),10)))}}function yt(e){if(e.currentTarget&&e.currentTarget.hasAttribute("href")){var t=e.currentTarget.getAttribute("href");t&&(H(t),e.preventDefault())}}function wt(e){At.isLastSlide()&&!1===zt.loop?(re(0,0),je()):Gt?je():Xe()}function kt(e,t){this.diameter=100,this.diameter2=this.diameter/2,this.thickness=6,this.playing=!1,this.progress=0,this.progressOffset=1,this.container=e,this.progressCheck=t,this.canvas=document.createElement("canvas"),this.canvas.className="playback",this.canvas.width=this.diameter,this.canvas.height=this.diameter,this.canvas.style.width=this.diameter2+"px",this.canvas.style.height=this.diameter2+"px",this.context=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.render()}var At,Lt,Et,St,xt,qt,Nt,Mt,Tt,It=".slides section",Pt=".slides>section",Ct=".slides>section.present>section",Ht=".slides>section:first-of-type",Dt=navigator.userAgent,zt={width:960,height:700,margin:.04,minScale:.2,maxScale:2,controls:!0,progress:!0,slideNumber:!1,showSlideNumber:"all",history:!1,keyboard:!0,keyboardCondition:null,overview:!0,center:!0,touch:!0,loop:!1,rtl:!1,shuffle:!1,fragments:!0,embedded:!1,help:!0,pause:!0,showNotes:!1,autoPlayMedia:null,autoSlide:0,autoSlideStoppable:!0,autoSlideMethod:null,mouseWheel:!1,rollingLinks:!1,hideAddressBar:!0,previewLinks:!1,postMessage:!0,postMessageEvents:!1,focusBodyOnPageVisibilityChange:!0,transition:"slide",transitionSpeed:"default",backgroundTransition:"fade",parallaxBackgroundImage:"",parallaxBackgroundSize:"",parallaxBackgroundHorizontal:null,parallaxBackgroundVertical:null,pdfMaxPagesPerSlide:Number.POSITIVE_INFINITY,pdfPageHeightOffset:-1,viewDistance:3,display:"block",dependencies:[]},Rt=!1,Wt=!1,Bt=!1,Ot=null,Ft=null,Yt=[],Xt=1,jt={layout:"",overview:""},Vt={},Ut={},$t=0,_t=0,Kt=!1,Jt=0,Zt=0,Qt=-1,Gt=!1,er={startX:0,startY:0,startSpan:0,startCount:0,captured:!1,threshold:40},tr={"N  ,  SPACE":"Next slide",P:"Previous slide","&#8592;  ,  H":"Navigate left","&#8594;  ,  L":"Navigate right","&#8593;  ,  K":"Navigate up","&#8595;  ,  J":"Navigate down",Home:"First slide",End:"Last slide","B  ,  .":"Pause",F:"Fullscreen","ESC, O":"Slide overview"};return kt.prototype.setPlaying=function(e){var t=this.playing;this.playing=e,!t&&this.playing?this.animate():this.render()},kt.prototype.animate=function(){var e=this.progress;this.progress=this.progressCheck(),e>.8&&this.progress<.2&&(this.progressOffset=this.progress),this.render(),this.playing&&Ut.requestAnimationFrameMethod.call(window,this.animate.bind(this))},kt.prototype.render=function(){var e=this.playing?this.progress:0,t=this.diameter2-this.thickness,r=this.diameter2,n=this.diameter2;this.progressOffset+=.1*(1-this.progressOffset);var a=-Math.PI/2+e*(2*Math.PI),i=-Math.PI/2+this.progressOffset*(2*Math.PI);this.context.save(),this.context.clearRect(0,0,this.diameter,this.diameter),this.context.beginPath(),this.context.arc(r,n,t+4,0,2*Math.PI,!1),this.context.fillStyle="rgba( 0, 0, 0, 0.4 )",this.context.fill(),this.context.beginPath(),this.context.arc(r,n,t,0,2*Math.PI,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#666",this.context.stroke(),this.playing&&(this.context.beginPath(),this.context.arc(r,n,t,i,a,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#fff",this.context.stroke()),this.context.translate(r-14,n-14),this.playing?(this.context.fillStyle="#fff",this.context.fillRect(0,0,10,28),this.context.fillRect(18,0,10,28)):(this.context.beginPath(),this.context.translate(4,0),this.context.moveTo(0,0),this.context.lineTo(24,14),this.context.lineTo(0,28),this.context.fillStyle="#fff",this.context.fill()),this.context.restore()},kt.prototype.on=function(e,t){this.canvas.addEventListener(e,t,!1)},kt.prototype.off=function(e,t){this.canvas.removeEventListener(e,t,!1)},kt.prototype.destroy=function(){this.playing=!1,this.canvas.parentNode&&this.container.removeChild(this.canvas)},At={VERSION:"3.5.0",initialize:function(r){if(!0!==Rt)if(Rt=!0,e(),Ut.transforms2d||Ut.transforms3d){Vt.wrapper=document.querySelector(".reveal"),Vt.slides=document.querySelector(".reveal .slides"),window.addEventListener("load",W,!1);var n=At.getQueryHash();void 0!==n.dependencies&&delete n.dependencies,v(zt,r),v(zt,n),q(),t()}else{document.body.setAttribute("class","no-transforms");for(var a=g(document.getElementsByTagName("img")),i=g(document.getElementsByTagName("iframe")),o=a.concat(i),s=0,l=o.length;s<l;s++){var c=o[s];c.getAttribute("data-src")&&(c.setAttribute("src",c.getAttribute("data-src")),c.removeAttribute("data-src"))}}},configure:p,sync:ne,slide:re,left:Ve,right:Ue,up:$e,down:_e,prev:Ke,next:Je,navigateFragment:We,prevFragment:Oe,nextFragment:Be,navigateTo:re,navigateLeft:Ve,navigateRight:Ue,navigateUp:$e,navigateDown:_e,navigatePrev:Ke,navigateNext:Je,layout:W,shuffle:oe,availableRoutes:be,availableFragments:ye,toggleHelp:D,toggleOverview:$,togglePause:G,toggleAutoSlide:te,isOverview:_,isPaused:ee,isAutoSliding:function(){return!(!Jt||Gt)},addEventListeners:f,removeEventListeners:h,getState:ze,setState:function(e){if("object"==typeof e){re(m(e.indexh),m(e.indexv),m(e.indexf));var t=m(e.paused),r=m(e.overview);"boolean"==typeof t&&t!==ee()&&G(t),"boolean"==typeof r&&r!==_()&&$(r)}},getSlidePastCount:Se,getProgress:xe,getIndices:Te,getSlides:Ie,getTotalSlides:Pe,getSlide:Ce,getSlideBackground:He,getSlideNotes:De,getPreviousSlide:function(){return St},getCurrentSlide:function(){return xt},getScale:function(){return Xt},getConfig:function(){return zt},getQueryHash:function(){var e={};location.search.replace(/[A-Z0-9]+?=([\w\.%-]*)/gi,function(t){e[t.split("=").shift()]=t.split("=").pop()});for(var t in e){var r=e[t];e[t]=m(unescape(r))}return e},isFirstSlide:function(){return 0===Lt&&0===Et},isLastSlide:function(){return!!xt&&(!xt.nextElementSibling&&(!K(xt)||!xt.parentNode.nextElementSibling))},isReady:function(){return Wt},addEventListener:function(e,t,r){"addEventListener"in window&&(Vt.wrapper||document.querySelector(".reveal")).addEventListener(e,t,r)},removeEventListener:function(e,t,r){"addEventListener"in window&&(Vt.wrapper||document.querySelector(".reveal")).removeEventListener(e,t,r)},triggerKey:function(e){et({keyCode:e})},registerKeyboardShortcut:function(e,t){tr[e]=t}}}),Reveal.initialize({markdown:{smartypants:!0},slideNumber:"c/t",history:!0});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
